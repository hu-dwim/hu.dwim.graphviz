;;; WARNING: This is a generated file, editing it is not advised!
(in-package :cl-user)
(asdf:operate 'asdf:load-op :verrazano-runtime)
(DEFPACKAGE :GRAPHVIZ-CFFI-BINDINGS (:USE :CFFI) (:NICKNAMES)
            (:EXPORT "+AGRAPH+" "+_GRAPH-H+" "+POINTS-PER-INCH+" "AGSTRCANON" "AGCANONICAL"
             "AGHTMLSTR" "AGGET" "AGXGET" "AGSET" "AGSAFESET" "AGXSET" "AGINDEX" "AGINITLIB"
             "AGOPEN" "AGSUBG" "AGFINDSUBG" "AGCLOSE" "AGREAD" "AGREAD-USERGETS" "AGREADLINE"
             "AGSETFILE" "AGMEMREAD" "AGWRITE" "AGERRORS" "AGPROTOGRAPH" "AGUSERGRAPH" "AGNNODES"
             "AGNEDGES" "AGINSERT" "AGDELETE" "AGCONTAINS" "AGNODE" "AGNODEATTR" "AGFINDNODE"
             "AGFSTNODE" "AGNXTNODE" "AGLSTNODE" "AGPRVNODE" "AGEDGE" "AGEDGEATTR" "AGFINDEDGE"
             "AGFSTEDGE" "AGNXTEDGE" "AGFSTIN" "AGNXTIN" "AGFSTOUT" "AGNXTOUT" "AGRAPHATTR"
             "AGFINDATTR" "AGCOPYATTR" "AGSETERR" "AGLASTERR" "AGERR" "AGERRORF" "AGWARNINGF"
             "AGSTRDUP" "AGSTRFREE" "GV-TOGGLE" "NEXT-INPUT-GRAPH" "GV-NEW-CONTEXT" "GV-USERNAME"
             "GV-CONTEXT" "GV-PARSE-ARGS" "GV-LAYOUT" "GV-LAYOUT-JOBS" "ATTACH-ATTRS"
             "AGSTRDUP-HTML" "GV-RENDER" "GV-RENDER-FILENAME" "GV-RENDER-JOBS" "GV-FREE-LAYOUT"
             "GV-FREE-CONTEXT" "SHAPE-KIND" "AGERRLEVEL-T" "AGOBJKIND-T" "RATIO-T" "QSORT-CMPF"
             "BSEARCH-CMPF" "ATTRSYM-T" "PATHEND-T" "PATH" "SPLINESF" "SHAPE-T" "NODEQUEUE"
             "FIELD-T" "GETS-F" "STROKE-T" "BEZIERF" "CODEGEN-T" "NLIST-T" "ADJMATRIX-T" "RANK-T"
             "GVC-T" "LAYOUT-T" "AGRAPHINFO-T" "AGEDGE-T" "AGPROTO-T" "PPOLY-T" "PPOLYLINE-T"
             "BEZIER" "SPLINES" "AGEDGEINFO-T" "EDGE-T" "ELIST" "HTMLLABEL-T" "TEXTLINE-T"
             "TEXTLABEL-T" "POLYGON-T" "GVJ-T" "INSIDE-T" "PORT" "NODE-T" "SHAPE-FUNCTIONS"
             "SHAPE-DESC" "AGNODEINFO-T" "AGRAPH-T" "AGNODE-T" "AGSYM-T" "AGDICT-T" "DTMETHOD-T"
             "DTLINK-T" "DTDATA-T" "DTEVENT-F" "DTMEMORY-F" "DTHASH-F" "DTCOMPAR-F" "DTFREE-F"
             "DTMAKE-F" "DTDISC-T" "DT-T" "DTSEARCH-F" "DICT-T" "AGDATA-T" "GRAPH-T" "FILE"
             "PPOINT-T" "POINTF" "SIZE-T" "FDP-PARMS-T" "FIELD-T" "NODEQUEUE" "SHAPE-T" "STROKE-T"
             "SPLINESF" "BEZIERF" "PATH" "PATHEND-T" "SPLINE-INFO" "CODEGEN-INFO-S" "CODEGEN-S"
             "AGRAPH-T" "AGRAPHINFO-T" "NLIST-T" "RANK-T" "ADJMATRIX-T" "GVC-S" "LAYOUT-T"
             "AGPROTO-T" "AGNODE-T" "AGNODEINFO-T" "ELIST" "AGEDGE-T" "AGEDGEINFO-T" "SPLINES"
             "BEZIER" "TEXTLABEL-T" "TEXTLABEL-T-ANONYMOUS-557" "HTMLLABEL-T"
             "TEXTLABEL-T-ANONYMOUS-557-ANONYMOUS-551" "TEXTLINE-T" "SHAPE-DESC" "POLYGON-T"
             "SHAPE-FUNCTIONS" "GVJ-S" "INSIDE-T" "INSIDE-T-ANONYMOUS-518" "INSIDE-T-ANONYMOUS-513"
             "PORT" "AGDATA-T" "AGDICT-T" "AGSYM-T" "PPOLY-T" "BOXF" "BOX" "POINTF-S" "POINT"))

(in-package :GRAPHVIZ-CFFI-BINDINGS)
(cffi:defcstruct _io-marker (_next :pointer) (_sbuf :pointer) (_pos :int))
(cffi::defctype* _-off-t :long)
(cffi::defctype* _io-lock-t :void)
(cffi::defctype* _-off-64-t _-quad-t)
(cffi::defctype* _-quad-t :long-long)
(cffi::defctype* size-t :unsigned-int)
(cffi:defcstruct _io-file (_flags :int) (_io-read-ptr :pointer) (_io-read-end :pointer)
 (_io-read-base :pointer) (_io-write-base :pointer) (_io-write-ptr :pointer)
 (_io-write-end :pointer) (_io-buf-base :pointer) (_io-buf-end :pointer) (_io-save-base :pointer)
 (_io-backup-base :pointer) (_io-save-end :pointer) (_markers :pointer) (_chain :pointer)
 (_fileno :int) (_flags-2 :int) (_old-offset _-off-t) (_cur-column :short) (_vtable-offset :char)
 (_shortbuf :char :count 0) (_lock :pointer) (_offset _-off-64-t) (_-pad-1 :pointer)
 (_-pad-2 :pointer) (_-pad-3 :pointer) (_-pad-4 :pointer) (_-pad-5 size-t) (_mode :int)
 (_unused-2 :char :count 39))
(cffi:defcstruct point (x :int) (y :int))
(cffi:defcstruct pointf-s (x :double) (y :double))
(cffi:defcstruct box (ll point) (ur point))
(cffi::defctype* pointf pointf-s)
(cffi:defcstruct boxf (ll pointf) (ur pointf))
(cffi::defctype* ppoint-t pointf-s)
(cffi:defcstruct ppoly-t (ps :pointer) (pn :int))
(cffi::defctype* file _io-file)
(cffi::defctype* graph-t agraph-t)
(cffi::defctype* agdata-t agdata-t)
(cffi::defctype* dict-t _dt-s)
(cffi::defctype* dtsearch-f :pointer)
(cffi::defctype* dt-t _dt-s)
(cffi::defctype* dtdisc-t _dtdisc-s)
(cffi::defctype* dtmake-f :pointer)
(cffi::defctype* dtfree-f :pointer)
(cffi::defctype* dtcompar-f :pointer)
(cffi::defctype* dthash-f :pointer)
(cffi::defctype* dtmemory-f :pointer)
(cffi::defctype* dtevent-f :pointer)
(cffi:defcstruct _dtdisc-s (key :int) (size :int) (link :int) (makef dtmake-f) (freef dtfree-f)
 (comparf dtcompar-f) (hashf dthash-f) (memoryf dtmemory-f) (eventf dtevent-f))
(cffi::defctype* dtdata-t _dtdata-s)
(cffi::defctype* dtlink-t _dtlink-s)
(cffi:defcstruct _dtlink-s-anonymous-458 (_hash :unsigned-int) (_left :pointer))
(cffi:defcstruct _dtlink-s (right :pointer) (hl _dtlink-s-anonymous-458))
(cffi:defcstruct _dtdata-s-anonymous-467 (_htab :pointer) (_head :pointer))
(cffi:defcstruct _dtdata-s (type :int) (here :pointer) (hh _dtdata-s-anonymous-467) (ntab :int)
 (size :int) (loop :int))
(cffi::defctype* dtmethod-t _dtmethod-s)
(cffi:defcstruct _dtmethod-s (searchf dtsearch-f) (type :int))
(cffi:defcstruct _dt-s (searchf dtsearch-f) (disc :pointer) (data :pointer) (memoryf dtmemory-f)
 (meth :pointer) (type :int) (nview :int) (view :pointer) (walk :pointer))
(cffi::defctype* agdict-t agdict-t)
(cffi::defctype* agsym-t agsym-t)
(cffi:defcstruct agsym-t (name :pointer) (value :pointer) (index :int) (printed :unsigned-char)
 (fixed :unsigned-char))
(cffi:defcstruct agdict-t (name :pointer) (dict :pointer) (list :pointer))
(cffi:defcstruct agdata-t (node-dict :pointer) (nodeattr :pointer) (edgeattr :pointer)
 (globattr :pointer) (max-node-id :int) (max-edge-id :int))
(cffi::defctype* agnode-t agnode-t)
(cffi::defctype* agraph-t agraph-t)
(cffi::defctype* agnodeinfo-t agnodeinfo-t)
(cffi::defctype* shape-desc shape-desc)
(cffi::defctype* shape-functions shape-functions)
(cffi::defctype* node-t agnode-t)
(cffi::defctype* port port)
(cffi:defcstruct port (p point) (theta :double) (bp :pointer) (defined :char) (constrained :char)
 (clip :char) (order :unsigned-char) (side :unsigned-char))
(cffi::defctype* inside-t inside-t)
(cffi:defcstruct inside-t-anonymous-513 (p :pointer) (r :pointer))
(cffi:defcstruct inside-t-anonymous-518 (n :pointer) (bp :pointer))
(cffi:defcstruct inside-t (a inside-t-anonymous-513) (s inside-t-anonymous-518))
(cffi::defctype* gvj-t gvj-s)
(cffi:defcstruct gvj-s)
(cffi:defcstruct shape-functions (initfn :pointer) (freefn :pointer) (portfn :pointer)
 (insidefn :pointer) (pboxfn :pointer) (codefn :pointer))
(cffi::defctype* polygon-t polygon-t)
(cffi:defcstruct polygon-t (regular :int) (peripheries :int) (sides :int) (orientation :double)
 (distortion :double) (skew :double) (option :int) (vertices :pointer))
(cffi:defcstruct shape-desc (name :pointer) (fns :pointer) (polygon :pointer) (usershape :char))
(cffi::defctype* textlabel-t textlabel-t)
(cffi::defctype* textline-t textline-t)
(cffi:defcstruct textline-t (str :pointer) (xshow :pointer) (width :double) (just :char))
(cffi:defcstruct textlabel-t-anonymous-557-anonymous-551 (line :pointer) (nlines :short))
(cffi::defctype* htmllabel-t htmllabel-t)
(cffi:defcstruct htmllabel-t)
(cffi:defcstruct textlabel-t-anonymous-557 (txt textlabel-t-anonymous-557-anonymous-551)
 (html :pointer))
(cffi:defcstruct textlabel-t (text :pointer) (fontname :pointer) (fontcolor :pointer)
 (fontsize :double) (dimen pointf) (p point) (d pointf) (u textlabel-t-anonymous-557) (set :char)
 (html :char))
(cffi::defctype* elist elist)
(cffi::defctype* edge-t agedge-t)
(cffi::defctype* agedgeinfo-t agedgeinfo-t)
(cffi::defctype* splines splines)
(cffi::defctype* bezier bezier)
(cffi:defcstruct bezier (list :pointer) (size :int) (sflag :int) (eflag :int) (sp point) (ep point))
(cffi:defcstruct splines (list :pointer) (size :int) (bb boxf))
(cffi::defctype* ppolyline-t ppoly-t)
(cffi:defcstruct agedgeinfo-t (spl :pointer) (tail-port port) (head-port port) (label :pointer)
 (head-label :pointer) (tail-label :pointer) (edge-type :char) (adjacent :char) (label-ontop :char)
 (gui-state :unsigned-char) (to-orig :pointer) (alg :pointer) (factor :double) (dist :double)
 (path ppolyline-t) (showboxes :char) (conc-opp-flag :char) (xpenalty :short) (weight :int)
 (cutvalue :int) (tree-index :int) (count :short) (minlen :short) (to-virt :pointer))
(cffi:defcstruct agedge-t (tag :int) (printkey :int) (handle :int) (attr :pointer) (head :pointer)
 (tail :pointer) (id :int) (u agedgeinfo-t))
(cffi:defcstruct elist (list :pointer) (size :int))
(cffi:defcstruct agnodeinfo-t (shape :pointer) (shape-info :pointer) (coord point) (width :double)
 (height :double) (bb boxf) (ht :int) (lw :int) (rw :int) (label :pointer) (alg :pointer)
 (state :char) (gui-state :unsigned-char) (clustnode :char) (pinned :char) (xsize :short)
 (ysize :short) (id :int) (heapindex :int) (hops :int) (pos :pointer) (dist :double)
 (showboxes :char) (has-port :char) (node-type :char) (mark :char) (onstack :char) (ranktype :char)
 (weight-class :char) (next :pointer) (prev :pointer) (in elist) (out elist) (flat-out elist)
 (flat-in elist) (other elist) (clust :pointer) (uf-size :int) (uf-parent :pointer)
 (inleaf :pointer) (outleaf :pointer) (rank :int) (order :int) (mval :int) (save-in elist)
 (save-out elist) (tree-in elist) (tree-out elist) (par :pointer) (low :int) (lim :int)
 (priority :int) (pad :double :count 0))
(cffi:defcstruct agnode-t (tag :int) (pad :int) (handle :int) (attr :pointer) (name :pointer)
 (id :int) (graph :pointer) (u agnodeinfo-t))
(cffi::defctype* agproto-t agproto-t)
(cffi:defcstruct agproto-t (n :pointer) (e :pointer) (prev :pointer))
(cffi::defctype* agraphinfo-t agraphinfo-t)
(cffi::defctype* layout-t layout-t)
(cffi:defcenum ratio-t (:r-none 0) (:r-value 1) (:r-fill 2) (:r-compress 3) (:r-auto 4)
 (:r-expand 5))
(cffi:defcstruct layout-t (quantum :double) (scale :double) (ratio :double) (dpi :double)
 (margin point) (page point) (size point) (filled :char) (landscape :char) (centered :char)
 (ratio-kind ratio-t))
(cffi::defctype* gvc-t gvc-s)
(cffi:defcstruct gvc-s)
(cffi::defctype* rank-t rank-t)
(cffi::defctype* adjmatrix-t adjmatrix-t)
(cffi:defcstruct adjmatrix-t (nrows :int) (ncols :int) (data :pointer))
(cffi:defcstruct rank-t (n :int) (v :pointer) (an :int) (av :pointer) (ht-1 :int) (ht-2 :int)
 (pht-1 :int) (pht-2 :int) (candidate :char) (valid :char) (cache-nc :int) (flat :pointer))
(cffi::defctype* nlist-t nlist-t)
(cffi:defcstruct nlist-t (list :pointer) (size :int))
(cffi:defcstruct agraphinfo-t (drawing :pointer) (label :pointer) (bb box) (border point :count 3)
 (gui-state :unsigned-char) (has-labels :char) (has-images :char) (charset :unsigned-char)
 (rankdir :int) (ht-1 :int) (ht-2 :int) (flags :short) (alg :pointer) (gvc :pointer)
 (cleanup :pointer) (neato-nlist :pointer) (move :int) (dist :pointer) (spring :pointer)
 (sum-t :pointer) (t :pointer) (ndim :int) (n-cluster :int) (clust :pointer) (nlist :pointer)
 (rank :pointer) (comp nlist-t) (minset :pointer) (maxset :pointer) (n-nodes :long)
 (minrank :short) (maxrank :short) (has-flat-edges :char) (showboxes :char)
 (cluster-was-collapsed :char) (nodesep :int) (ranksep :int) (ln :pointer) (rn :pointer)
 (leader :pointer) (rankleader :pointer) (expanded :char) (installed :char) (set-type :char)
 (label-pos :char) (exact-ranksep :char))
(cffi:defcstruct agraph-t (tag :int) (kind :int) (handle :int) (attr :pointer) (name :pointer)
 (univ :pointer) (nodes :pointer) (inedges :pointer) (outedges :pointer) (root :pointer)
 (meta-node :pointer) (proto :pointer) (u agraphinfo-t))
(cffi:defcstruct codegen-s (reset :pointer) (begin-job :pointer) (end-job :pointer)
 (begin-graph :pointer) (end-graph :pointer) (begin-page :pointer) (end-page :pointer)
 (begin-layer :pointer) (end-layer :pointer) (begin-cluster :pointer) (end-cluster :pointer)
 (begin-nodes :pointer) (end-nodes :pointer) (begin-edges :pointer) (end-edges :pointer)
 (begin-node :pointer) (end-node :pointer) (begin-edge :pointer) (end-edge :pointer)
 (begin-context :pointer) (end-context :pointer) (begin-anchor :pointer) (end-anchor :pointer)
 (set-font :pointer) (textline :pointer) (set-pencolor :pointer) (set-fillcolor :pointer)
 (set-style :pointer) (ellipse :pointer) (polygon :pointer) (beziercurve :pointer)
 (polyline :pointer) (bezier-has-arrows :char) (comment :pointer) (textsize :pointer)
 (user-shape :pointer) (usershapesize :pointer))
(cffi::defctype* codegen-t codegen-s)
(cffi:defcstruct codegen-info-s (cg :pointer) (name :pointer) (id :int) (info :pointer))
(cffi:defcstruct spline-info (swap-ends :pointer) (spline-merge :pointer))
(cffi:defcstruct pathend-t (nb box) (np point) (sidemask :int) (boxn :int) (boxes box :count 19))
(cffi:defcstruct path (start port) (end port) (ulpp :pointer) (urpp :pointer) (llpp :pointer)
 (lrpp :pointer) (nbox :int) (boxes :pointer) (data :pointer))
(cffi:defcstruct bezierf (list :pointer) (size :int) (sflag :int) (eflag :int) (sp pointf)
 (ep pointf))
(cffi:defcstruct splinesf (list :pointer) (size :int))
(cffi:defcstruct stroke-t (nvertices :int) (flags :int) (vertices :pointer))
(cffi:defcstruct shape-t (nstrokes :int) (strokes :pointer))
(cffi:defcstruct nodequeue (store :pointer) (limit :pointer) (head :pointer) (tail :pointer))
(cffi:defcstruct field-t (size point) (b box) (n-flds :int) (lp :pointer) (fld :pointer)
 (id :pointer) (lr :unsigned-char) (sides :unsigned-char))
(cffi:defcstruct fdp-parms-t (use-grid :int) (use-new :int) (num-iters :int) (unscaled :int)
 (c :double) (tfact :double) (k :double) (t0 :double))
(cffi:defcenum agobjkind-t (:agnode 1) (:agedge 2) (:aggraph 3))
(cffi:defcenum agerrlevel-t (:agwarn 0) (:agerr 1) (:agmax 2) (:agprev 3))
(cffi::defctype* gets-f :pointer)
(cffi:defcenum shape-kind (:sh-unset 0) (:sh-poly 1) (:sh-record 2) (:sh-point 3) (:sh-epsf 4)
 (:sh-user 5))
(cffi::defctype* attrsym-t agsym-t)
(cffi::defctype* bsearch-cmpf :pointer)
(cffi::defctype* qsort-cmpf :pointer)
(cl:progn (cffi:defcfun ("gvFreeContext" gv-free-context) :int (gvc :pointer))
 (cffi:defcfun ("gvFreeLayout" gv-free-layout) :int (gvc :pointer) (g :pointer))
 (cffi:defcfun ("gvRenderJobs" gv-render-jobs) :int (gvc :pointer) (g :pointer))
 (cffi:defcfun ("gvRenderFilename" gv-render-filename) :int (gvc :pointer) (g :pointer)
  (format :pointer) (filename :pointer))
 (cffi:defcfun ("gvRender" gv-render) :int (gvc :pointer) (g :pointer) (format :pointer)
  (out :pointer))
 (cffi:defcfun ("agstrdup_html" agstrdup-html) :pointer (s :pointer))
 (cffi:defcfun ("attach_attrs" attach-attrs) :void (g :pointer))
 (cffi:defcfun ("gvLayoutJobs" gv-layout-jobs) :int (gvc :pointer) (g :pointer))
 (cffi:defcfun ("gvLayout" gv-layout) :int (gvc :pointer) (g :pointer) (engine :pointer))
 (cffi:defcfun ("gvParseArgs" gv-parse-args) :int (gvc :pointer) (argc :int) (argv :pointer))
 (cffi:defcfun ("gvContext" gv-context) :pointer)
 (cffi:defcfun ("gvUsername" gv-username) :pointer)
 (cffi:defcfun ("gvNEWcontext" gv-new-context) :pointer (info :pointer) (user :pointer))
 (cffi:defcfun ("next_input_graph" next-input-graph) :pointer)
 (cffi:defcfun ("gvToggle" gv-toggle) :void (arg1 :int))
 (cffi:defcfun ("agstrfree" agstrfree) :void (arg1 :pointer))
 (cffi:defcfun ("agstrdup" agstrdup) :pointer (arg1 :pointer))
 (cffi:defcfun ("agwarningf" agwarningf) :void (fmt :pointer))
 (cffi:defcfun ("agerrorf" agerrorf) :void (fmt :pointer))
 (cffi:defcfun ("agerr" agerr) :int (level agerrlevel-t) (fmt :pointer))
 (cffi:defcfun ("aglasterr" aglasterr) :pointer)
 (cffi:defcfun ("agseterr" agseterr) :void (arg1 agerrlevel-t))
 (cffi:defcfun ("agcopyattr" agcopyattr) :int (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agfindattr" agfindattr) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agraphattr" agraphattr) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))
 (cffi:defcfun ("agnxtout" agnxtout) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agfstout" agfstout) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agnxtin" agnxtin) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agfstin" agfstin) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agnxtedge" agnxtedge) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))
 (cffi:defcfun ("agfstedge" agfstedge) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agfindedge" agfindedge) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))
 (cffi:defcfun ("agedgeattr" agedgeattr) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))
 (cffi:defcfun ("agedge" agedge) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))
 (cffi:defcfun ("agprvnode" agprvnode) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("aglstnode" aglstnode) :pointer (arg1 :pointer))
 (cffi:defcfun ("agnxtnode" agnxtnode) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agfstnode" agfstnode) :pointer (arg1 :pointer))
 (cffi:defcfun ("agfindnode" agfindnode) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agnodeattr" agnodeattr) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))
 (cffi:defcfun ("agnode" agnode) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agcontains" agcontains) :int (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agdelete" agdelete) :void (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("aginsert" aginsert) :void (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agnedges" agnedges) :int (arg1 :pointer))
 (cffi:defcfun ("agnnodes" agnnodes) :int (arg1 :pointer))
 (cffi:defcfun ("agusergraph" agusergraph) :pointer (arg1 :pointer))
 (cffi:defcfun ("agprotograph" agprotograph) :pointer) (cffi:defcfun ("agerrors" agerrors) :int)
 (cffi:defcfun ("agwrite" agwrite) :int (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agmemread" agmemread) :pointer (arg1 :pointer))
 (cffi:defcfun ("agsetfile" agsetfile) :void (arg1 :pointer))
 (cffi:defcfun ("agreadline" agreadline) :void (arg1 :int))
 (cffi:defcfun ("agread_usergets" agread-usergets) :pointer (arg1 :pointer) (arg2 gets-f))
 (cffi:defcfun ("agread" agread) :pointer (arg1 :pointer))
 (cffi:defcfun ("agclose" agclose) :void (arg1 :pointer))
 (cffi:defcfun ("agfindsubg" agfindsubg) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agsubg" agsubg) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agopen" agopen) :pointer (arg1 :pointer) (arg2 :int))
 (cffi:defcfun ("aginitlib" aginitlib) :void (arg1 :int) (arg2 :int) (arg3 :int))
 (cffi:defcfun ("agindex" agindex) :int (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("agxset" agxset) :int (arg1 :pointer) (arg2 :int) (arg3 :pointer))
 (cffi:defcfun ("agsafeset" agsafeset) :int (arg1 :pointer) (arg2 :pointer) (arg3 :pointer)
  (arg4 :pointer))
 (cffi:defcfun ("agset" agset) :int (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))
 (cffi:defcfun ("agxget" agxget) :pointer (arg1 :pointer) (arg2 :int))
 (cffi:defcfun ("agget" agget) :pointer (arg1 :pointer) (arg2 :pointer))
 (cffi:defcfun ("aghtmlstr" aghtmlstr) :int (s :pointer))
 (cffi:defcfun ("agcanonical" agcanonical) :pointer (arg1 :pointer))
 (cffi:defcfun ("agstrcanon" agstrcanon) :pointer (arg1 :pointer) (arg2 :pointer))
 (cl:defconstant +points-per-inch+ 72) (cl:defconstant +_graph-h+ 1) (cl:defconstant +agraph+ 0))
